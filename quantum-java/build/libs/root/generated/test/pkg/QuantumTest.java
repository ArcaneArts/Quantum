package test.pkg;

import art.arcane.quantum.QuantumFabric;
import art.arcane.quantum.api.QuantumEntangledObject;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import art.arcane.quill.collections.KList;
import art.arcane.quill.collections.KMap;
import java.util.List;
import java.util.Map;
import art.arcane.quantum.api.Entangled;
import art.arcane.quantum.test.QuantumTest;


/**
 * This class was generated by Quantum
 */
@Data
@Builder
@EqualsAndHashCode
@QuantumEntangledObject("art.arcane.quantum.test.QuantumTest")
public class QuantumTest implements Cloneable
{
    @Entangled
    private String aString = "default";
    @Entangled
    private int anpInt = 1;
    @Entangled
    private double apDouble = 2.0D;
    @Entangled
    private short apShort = Short.valueOf(3);
    @Entangled
    private boolean apBoolean = false;
    @Entangled
    private long apLong = 4L;
    @Entangled
    private byte apByte = Byte.valueOf(5);
    @Entangled
    private float apFloat = 6.0F;
    @Entangled
    private int anInt = 7;
    @Entangled
    private double aDouble = 8.0D;
    @Entangled
    private short aShort = Short.valueOf(9);
    @Entangled
    private boolean aBoolean = true;
    @Entangled
    private long aLong = 10L;
    @Entangled
    private byte aByte = Byte.valueOf(11);
    @Entangled
    private float aFloat = 12.0F;
    @Entangled
    private int someReadOnlyValue = 36;
    @Entangled
    private QuantumTest self;
    @Entangled
    private List<Integer> intList = new KList<>();
    @Entangled
    private List<String> intkList = new KList<>();
    @Entangled
    private Map<Long, Double> mapTest = new KMap<>();
    @Entangled
    private Map<Float, Byte> kmapTest = new KMap<>();
    @Entangled
    private Map<String, List<Byte>> nestedTest1 = new KMap<>();

    @Entangled
    public void methodVoid() {
        // This is content
    }

    @Entangled
    public int methodInt(int a) {
        // This is content
    }

    @Entangled
    public Map<String, Integer> typeMethod(String a, List<String> b) {
        // This is content
    }

    @Entangled
    public List<String> typeMethod2(Map<String, List<Double>> a) {
        // This is content
    }


    /**
     * Create a new QuantumTest from supplied json
     * @param json the json
     * @return the new QuantumTest object
     */
    public static QuantumTest fromJson(String json)
    {
        return QuantumFabric.gson.fromJson(json, QuantumTest.class);
    }

    /**
     * Convert this QuantumTest to json (serialize)
     * @return the json string
     */
    public String toJson()
    {
        return QuantumFabric.gson.toJson(this);
    }

    /**
     * Clones this QuantumTest by serializing to json, then deserializing.
     * @return the cloned object
     */
    public QuantumTest secureClone()
    {
        return fromJson(toJson());
    }
}

